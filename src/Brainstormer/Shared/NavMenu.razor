@using Brainstormer.Models.models

@inject NavigationManager _navigationManager
@inject IStateStorage _stateStorage

<MudGrid Justify="Justify.FlexStart">
    @foreach (var item in _navItems)
    {
        <MudItem xs="2">
            <MudButton @onclick="() => NavigateTo(item.Path)"
                       Variant="Variant.Filled"
                       Color="Color.Info" Disabled="!item.ActiveCondition()">
                @item.Label
            </MudButton>
        </MudItem>
    } 
</MudGrid>
<MudSpacer/>
<MudText Color="Color.Default" Typo="Typo.h3">Brainstormer</MudText>


@code
{
    
    
    private IEnumerable<NavigationItem> _navItems;

    protected override void OnInitialized()
    {
        _navItems = NavigationItems();
        _stateStorage.Subscribe(StateStorageHasChanged);
        base.OnInitialized();
    }

    private IList<NavigationItem> NavigationItems() => new List<NavigationItem>
    {
        new NavigationItem("1. Setup", "/Setup", () => true),
        new NavigationItem("2. Create", "/Create", () => true),
        new NavigationItem("3. Cull", "/Cull", () => _stateStorage.Ideas.Any()),
        new NavigationItem("4. Describe", "/Describe", () => _stateStorage.Ideas.Any()),
        new NavigationItem("5. Rank", "/Rank", () => _stateStorage.Ideas.Any())
    };

    private void NavigateTo(string path)
    {
        _navigationManager.NavigateTo(path);
    }

    private async Task StateStorageHasChanged() => await InvokeAsync(StateHasChanged);
}
